/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query ALL_USERS_QUERY {\n  users {\n    id\n    firstName\n    lastName\n    email\n    role\n    accountStatus\n    accountType\n    office\n  }\n}": types.All_Users_QueryDocument,
    "mutation UPDATE_ACCOUNT_STATUS_MUTATION($accountStatus: AccountStatus, $userId: ID!) {\n  updateAccountStatus(accountStatus: $accountStatus, userId: $userId) {\n    id\n    accountStatus\n  }\n}": types.Update_Account_Status_MutationDocument,
    "mutation UPDATE_ACCOUNT_TYPE_MUTATION($accountType: AccountType, $userId: ID!) {\n  updateAccountType(accountType: $accountType, userId: $userId) {\n    id\n    accountType\n  }\n}": types.Update_Account_Type_MutationDocument,
    "mutation UPDATE_OFFICE_MUTATION($office: Office, $userId: ID!) {\n  updateOffice(office: $office, userId: $userId) {\n    id\n    office\n  }\n}": types.Update_Office_MutationDocument,
    "mutation UPDATE_ROLE_MUTATION($role: Role, $userId: ID!) {\n  updateRole(role: $role, userId: $userId) {\n    id\n    role\n  }\n}": types.Update_Role_MutationDocument,
    "mutation UPDATE_TITLE_MUTATION($titles: [Title], $userId: ID!) {\n  updateTitles(titles: $titles, userId: $userId) {\n    id\n    titles\n  }\n}": types.Update_Title_MutationDocument,
    "mutation NEW_ACCOUNTS_APPROVE_MUTATION($userId: ID!) {\n  unlockNewAccount(userId: $userId) {\n    message\n  }\n}": types.New_Accounts_Approve_MutationDocument,
    "query NEW_ACCOUNTS_QUERY {\n  users(accountStatus: [LOCKED], accountType: [GUEST]) {\n    id\n    firstName\n    lastName\n    username\n    birthdate\n    gender\n  }\n}": types.New_Accounts_QueryDocument,
    "mutation NEW_ACCOUNTS_REJECT_MUTATION($userId: ID!, $reason: String!) {\n  rejectNewAccount(userId: $userId, reason: $reason) {\n    message\n  }\n}": types.New_Accounts_Reject_MutationDocument,
    "query ADMIN_PROFILE_HEADER_QUERY($username: String) {\n  user(username: $username) {\n    id\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    joined\n    role\n    username\n    titles\n    office\n    accountType\n    rig {\n      image {\n        id\n        url\n      }\n    }\n  }\n}": types.Admin_Profile_Header_QueryDocument,
    "query QUORUM_QUERY {\n  users(accountStatus: [ACTIVE, PAST_DUE], accountType: [FULL]) {\n    username\n    id\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    accountType\n    accountStatus\n  }\n}": types.Quorum_QueryDocument,
    "query DOCS_QUERY {\n  docs: getDocs {\n    bylaws {\n      name\n      link\n      date\n    }\n    sors {\n      name\n      link\n      date\n    }\n    archives {\n      year\n      monthlyArchives {\n        month\n        meetingMinutes {\n          name\n          link\n          date\n        }\n        newsletter {\n          name\n          link\n          date\n        }\n      }\n    }\n  }\n}": types.Docs_QueryDocument,
    "mutation DELETE_AVATAR($avatar: CloudinaryImageInput!) {\n  deleteAvatar(avatar: $avatar) {\n    message\n  }\n}": types.Delete_AvatarDocument,
    "mutation UPDATE_AVATAR($data: ImageUpdateInput!) {\n  updateAvatar(data: $data) {\n    message\n  }\n}": types.Update_AvatarDocument,
    "query DASHBOARD_UPCOMING_EVENTS_QUERY {\n  myself {\n    id\n    accountType\n  }\n  events: getUpcomingEvents(count: 7) {\n    id\n    title\n    startTime\n    membersOnly\n    rsvps {\n      member {\n        id\n      }\n      status\n    }\n  }\n}": types.Dashboard_Upcoming_Events_QueryDocument,
    "query NEXT_EVENT_QUERY {\n  myself {\n    id\n    accountType\n  }\n  event: getNextEvent {\n    id\n    title\n    startTime\n    description\n    featuredImage {\n      id\n      url\n    }\n    startTime\n    endTime\n    membersOnly\n    rsvps {\n      id\n      member {\n        id\n      }\n      status\n    }\n    host {\n      id\n      firstName\n      lastName\n      avatar {\n        id\n        url\n      }\n    }\n    trailDifficulty\n    trail {\n      id\n      name\n      featuredImage {\n        id\n        url\n      }\n    }\n  }\n}": types.Next_Event_QueryDocument,
    "mutation RSVP_MUTATION($rsvp: RSVPInput) {\n  setRSVP(rsvp: $rsvp) {\n    message\n  }\n}": types.Rsvp_MutationDocument,
    "mutation CREATE_EVENT_MUTATION($type: String!, $title: String!, $description: String, $startTime: DateTime!, $endTime: DateTime!, $address: String, $trailDifficulty: TrailDifficulty, $trailNotes: String, $rallyAddress: String, $membersOnly: Boolean, $maxAttendees: Int, $maxRigs: Int, $changeDisabled: Boolean, $host: String!, $trail: String, $featuredImage: String, $newFeaturedImage: CloudinaryImageInput) {\n  createEvent(\n    event: {type: $type, title: $title, description: $description, startTime: $startTime, endTime: $endTime, address: $address, trailDifficulty: $trailDifficulty, trailNotes: $trailNotes, rallyAddress: $rallyAddress, membersOnly: $membersOnly, maxAttendees: $maxAttendees, maxRigs: $maxRigs, changeDisabled: $changeDisabled, host: $host, trail: $trail, featuredImage: $featuredImage, newFeaturedImage: $newFeaturedImage}\n  ) {\n    message\n  }\n}": types.Create_Event_MutationDocument,
    "query SETUP_NEW_EVENT_QUERY {\n  myself {\n    id\n    username\n    firstName\n    lastName\n  }\n  runLeaders: getRunLeaders {\n    id\n    username\n    firstName\n    lastName\n  }\n  trails: getTrails {\n    id\n    name\n  }\n}": types.Setup_New_Event_QueryDocument,
    "mutation DELETE_EVENT_MUTATION($id: ID!) {\n  deleteEvent(id: $id) {\n    message\n  }\n}": types.Delete_Event_MutationDocument,
    "mutation EDIT_EVENT_MUTATION($id: ID!, $type: String!, $title: String!, $description: String, $startTime: DateTime!, $endTime: DateTime!, $address: String, $trailDifficulty: TrailDifficulty, $trailNotes: String, $rallyAddress: String, $membersOnly: Boolean, $host: String!, $trail: String, $featuredImage: String, $newFeaturedImage: CloudinaryImageInput, $maxAttendees: Int, $maxRigs: Int, $changeDisabled: Boolean) {\n  updateEvent(\n    id: $id\n    event: {type: $type, title: $title, description: $description, startTime: $startTime, endTime: $endTime, address: $address, trailDifficulty: $trailDifficulty, trailNotes: $trailNotes, rallyAddress: $rallyAddress, membersOnly: $membersOnly, host: $host, trail: $trail, featuredImage: $featuredImage, newFeaturedImage: $newFeaturedImage, maxAttendees: $maxAttendees, maxRigs: $maxRigs, changeDisabled: $changeDisabled}\n  ) {\n    message\n  }\n}": types.Edit_Event_MutationDocument,
    "query SETUP_EXISTING_EVENT_QUERY($eventId: ID!) {\n  event: getEvent(eventId: $eventId) {\n    id\n    type\n    title\n    description\n    featuredImage {\n      id\n      url\n      publicId\n    }\n    host {\n      id\n      firstName\n      lastName\n      avatar {\n        id\n        smallUrl\n      }\n      username\n    }\n    startTime\n    endTime\n    membersOnly\n    rsvps {\n      id\n      member {\n        id\n        firstName\n        lastName\n        avatar {\n          id\n          smallUrl\n        }\n      }\n      status\n    }\n    address\n    trailDifficulty\n    trailNotes\n    trail {\n      id\n      slug\n      name\n      address\n      avgDifficulty\n      avgRatings\n      currentConditions\n      conditionsLastReported\n      favoriteCount\n    }\n    rallyAddress\n    maxAttendees\n    maxRigs\n    changeDisabled\n  }\n  runLeaders: getRunLeaders {\n    id\n    username\n    firstName\n    lastName\n  }\n  trails: getTrails {\n    id\n    name\n  }\n}": types.Setup_Existing_Event_QueryDocument,
    "mutation DELETE_EVENT_IMAGE($avatar: CloudinaryImageInput!) {\n  deleteAvatar(avatar: $avatar) {\n    message\n  }\n}": types.Delete_Event_ImageDocument,
    "mutation UPDATE_EVENT_IMAGE($data: ImageUpdateInput!) {\n  updateAvatar(data: $data) {\n    message\n  }\n}": types.Update_Event_ImageDocument,
    "query EVENT_QUERY($eventId: ID!) {\n  event: getEvent(eventId: $eventId) {\n    id\n    type\n  }\n}": types.Event_QueryDocument,
    "query PAST_EVENTS_QUERY($count: Int, $page: Int) {\n  myself {\n    id\n    firstName\n    lastName\n    accountType\n    avatar {\n      id\n      smallUrl\n    }\n  }\n  totalEvents: pastEventsCount {\n    count\n  }\n  events: getPastEvents(count: $count, page: $page) {\n    id\n    title\n    featuredImage {\n      id\n      smallUrl\n    }\n    startTime\n    endTime\n    membersOnly\n    host {\n      id\n      firstName\n      lastName\n    }\n    address\n    rallyAddress\n    trailDifficulty\n    maxRigs\n    maxAttendees\n    trail {\n      id\n      name\n      avgDifficulty\n      featuredImage {\n        id\n        smallUrl\n      }\n    }\n    rsvps {\n      member {\n        id\n        firstName\n        lastName\n        avatar {\n          id\n          smallUrl\n        }\n      }\n      status\n      isRider\n      guestCount\n    }\n  }\n}": types.Past_Events_QueryDocument,
    "query UPCOMING_EVENTS_QUERY($count: Int, $page: Int) {\n  myself {\n    id\n    firstName\n    lastName\n    accountType\n    avatar {\n      id\n      smallUrl\n    }\n  }\n  totalEvents: upcomingEventsCount {\n    count\n  }\n  events: getUpcomingEvents(count: $count, page: $page) {\n    id\n    title\n    featuredImage {\n      id\n      smallUrl\n    }\n    startTime\n    endTime\n    membersOnly\n    host {\n      id\n      firstName\n      lastName\n    }\n    address\n    rallyAddress\n    trailDifficulty\n    maxRigs\n    maxAttendees\n    trail {\n      id\n      name\n      avgDifficulty\n      featuredImage {\n        id\n        smallUrl\n      }\n    }\n    rsvps {\n      member {\n        id\n        firstName\n        lastName\n        avatar {\n          id\n          smallUrl\n        }\n      }\n      status\n      isRider\n      guestCount\n    }\n  }\n}": types.Upcoming_Events_QueryDocument,
    "query NON_RUN_EVENT_QUERY($eventId: ID!) {\n  myself {\n    id\n    accountType\n  }\n  event: getEvent(eventId: $eventId) {\n    id\n    type\n    title\n    description\n    featuredImage {\n      id\n      url\n    }\n    host {\n      id\n      firstName\n      lastName\n      avatar {\n        id\n        smallUrl\n      }\n    }\n    startTime\n    endTime\n    membersOnly\n    rsvps {\n      id\n      member {\n        id\n        firstName\n        lastName\n        username\n        accountType\n        email\n        runsAttendedCount\n        contactInfo {\n          id\n          city\n          state\n        }\n        avatar {\n          id\n          url\n        }\n      }\n      status\n      guestCount\n    }\n    address\n    maxAttendees\n    changeDisabled\n  }\n}": types.Non_Run_Event_QueryDocument,
    "query RUN_EVENT_QUERY($eventId: ID!) {\n  myself {\n    id\n    accountType\n    vehicle {\n      id\n      year\n      make\n      model\n    }\n  }\n  event: getEvent(eventId: $eventId) {\n    id\n    type\n    title\n    description\n    featuredImage {\n      id\n      url\n    }\n    host {\n      id\n      firstName\n      lastName\n      avatar {\n        id\n        smallUrl\n      }\n    }\n    startTime\n    endTime\n    membersOnly\n    trailDifficulty\n    rsvps {\n      id\n      member {\n        id\n        firstName\n        lastName\n        username\n        accountType\n        email\n        runsAttendedCount\n        contactInfo {\n          id\n          city\n          state\n        }\n        avatar {\n          id\n          url\n        }\n        vehicle {\n          id\n          year\n          make\n          model\n          trim\n        }\n      }\n      status\n      guestCount\n      isRider\n      equipment\n    }\n    address\n    trail {\n      id\n      description\n      name\n      address\n      avgDifficulty\n      avgRatings\n      conditionsLastReported\n      favoriteCount\n      trailheadCoords\n      featuredImage {\n        id\n        url\n      }\n    }\n    rallyAddress\n    maxRigs\n    maxAttendees\n  }\n}": types.Run_Event_QueryDocument,
    "mutation CHANGE_EMAIL_MUTATION($email: String!) {\n  changeEmail(email: $email) {\n    message\n  }\n}": types.Change_Email_MutationDocument,
    "mutation CHANGE_PASSWORD_MUTATION($password: String!, $confirmPassword: String!) {\n  changePassword(password: $password, confirmPassword: $confirmPassword) {\n    message\n  }\n}": types.Change_Password_MutationDocument,
    "mutation REQUEST_RESET_MUTATION($email: String!) {\n  requestReset(email: $email) {\n    message\n  }\n}": types.Request_Reset_MutationDocument,
    "mutation LOGIN_MUTATION($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    message\n  }\n}": types.Login_MutationDocument,
    "mutation LOGOUT_MUTATION {\n  logout {\n    message\n  }\n}": types.Logout_MutationDocument,
    "mutation REGISTER_MUTATION($firstName: String, $lastName: String, $email: String!, $confirmEmail: String!, $source: String!) {\n  register(\n    firstName: $firstName\n    lastName: $lastName\n    email: $email\n    confirmEmail: $confirmEmail\n    source: $source\n  ) {\n    message\n  }\n}": types.Register_MutationDocument,
    "mutation RESET_MUTATION($resetToken: String!, $password: String!, $confirmPassword: String!) {\n  resetPassword(\n    resetToken: $resetToken\n    password: $password\n    confirmPassword: $confirmPassword\n  ) {\n    id\n    email\n    firstName\n  }\n}": types.Reset_MutationDocument,
    "query REGISTRATION_QUERY($token: String!) {\n  getRegistration(token: $token) {\n    id\n    email\n    firstName\n    lastName\n  }\n}": types.Registration_QueryDocument,
    "mutation SIGNUP_MUTATION($email: String!, $firstName: String!, $lastName: String!, $password: String!, $username: String!, $gender: Gender!, $birthdate: DateTime!, $token: String!) {\n  signUp(\n    email: $email\n    firstName: $firstName\n    lastName: $lastName\n    password: $password\n    username: $username\n    gender: $gender\n    birthdate: $birthdate\n    token: $token\n  ) {\n    message\n  }\n}": types.Signup_MutationDocument,
    "mutation PAY_DUES_MUTATION($data: DuesPaymentInput!) {\n  payMembershipDues(data: $data) {\n    message\n  }\n}": types.Pay_Dues_MutationDocument,
    "mutation SUBMIT_RUN_REPORT_MUTATION($id: ID!, $type: String!, $title: String!, $description: String, $startTime: DateTime!, $endTime: DateTime!, $address: String, $trailDifficulty: TrailDifficulty, $trailNotes: String, $rallyAddress: String, $membersOnly: Boolean, $host: String!, $trail: String, $featuredImage: String, $newFeaturedImage: CloudinaryImageInput, $maxAttendees: Int, $maxRigs: Int) {\n  updateEvent(\n    id: $id\n    event: {type: $type, title: $title, description: $description, startTime: $startTime, endTime: $endTime, address: $address, trailDifficulty: $trailDifficulty, trailNotes: $trailNotes, rallyAddress: $rallyAddress, membersOnly: $membersOnly, host: $host, trail: $trail, featuredImage: $featuredImage, newFeaturedImage: $newFeaturedImage, maxAttendees: $maxAttendees, maxRigs: $maxRigs}\n  ) {\n    message\n  }\n}": types.Submit_Run_Report_MutationDocument,
    "mutation CREATE_TRAIL_MUTATION($trail: TrailInput!) {\n  createTrail(trail: $trail) {\n    message\n  }\n}": types.Create_Trail_MutationDocument,
    "mutation EDIT_TRAIL_MUTATION($trail: TrailInput!, $id: ID!) {\n  updateTrail(trail: $trail, id: $id) {\n    message\n  }\n}": types.Edit_Trail_MutationDocument,
    "query EXISTING_TRAIL_QUERY($trailSlug: String!) {\n  trail: getTrail(slug: $trailSlug) {\n    id\n    name\n    slug\n    description\n    featuredImage {\n      id\n      url\n    }\n    trailheadCoords\n    address\n  }\n}": types.Existing_Trail_QueryDocument,
    "mutation UPDATE_TRAIL_IMAGE($id: String!, $image: CloudinaryImageInput!) {\n  updateTrailImage(id: $id, image: $image) {\n    message\n  }\n}": types.Update_Trail_ImageDocument,
    "query TRAILS_QUERY {\n  trails: getTrails {\n    id\n    slug\n    name\n    description\n    featuredImage {\n      id\n      url\n    }\n    trailheadCoords\n    address\n    avgDifficulty\n    avgRatings\n    currentConditions\n    conditionsLastReported\n    favoriteCount\n    pastEvents {\n      id\n      title\n    }\n    visitors {\n      id\n      firstName\n    }\n  }\n}": types.Trails_QueryDocument,
    "query ACCOUNT_FORM_QUERY {\n  myself {\n    id\n    email\n    accountType\n    accountStatus\n    eventsRSVPd {\n      status\n      event {\n        id\n        type\n        startTime\n      }\n    }\n  }\n  logItems: getMembershipLogItems(username: \"self\", messageCode: DUES_PAID) {\n    id\n    time\n    message\n    logger {\n      id\n      firstName\n      lastName\n    }\n  }\n}": types.Account_Form_QueryDocument,
    "query ADMIN_OVERVIEW_QUERY($username: String!) {\n  user(username: $username) {\n    id\n    createdAt\n    joined\n    lastLogin\n  }\n  duesLastReceived: getDuesLastReceived(username: $username) {\n    time\n  }\n  meetings: getUserEvents(username: $username, eventType: MEETING) {\n    id\n    startTime\n  }\n  runs: getUserEvents(username: $username, eventType: RUN) {\n    id\n    startTime\n  }\n}": types.Admin_Overview_QueryDocument,
    "query MEMBER_ADMIN_PROFILE_QUERY($username: String) {\n  user(username: $username) {\n    id\n    titles\n    office\n    role\n    accountStatus\n    accountType\n  }\n}": types.Member_Admin_Profile_QueryDocument,
    "mutation USER_ADMIN_UPDATE_PROFILE_MUTATION($id: ID!, $titles: [Title], $office: String, $role: String!, $accountStatus: String!, $accountType: String!) {\n  updateUserAdminProfileSettings(\n    data: {titles: $titles, office: $office, role: $role, accountStatus: $accountStatus, accountType: $accountType}\n    id: $id\n  ) {\n    message\n  }\n}": types.User_Admin_Update_Profile_MutationDocument,
    "mutation EDIT_NEWSLETTER_PREFS_MUTATION($action: NewsletterAction!, $list: NewsletterList!) {\n  editNewsletterPreferences(action: $action, list: $list) {\n    message\n  }\n}": types.Edit_Newsletter_Prefs_MutationDocument,
    "query NEWSLETTER_PREFS_QUERY {\n  membersPref: newsletterPreferences(list: MEMBERS) {\n    status\n  }\n  generalPref: newsletterPreferences(list: GENERAL) {\n    status\n  }\n}": types.Newsletter_Prefs_QueryDocument,
    "mutation LOG_MEMBERSHIP_ITEM_MUTATION($date: DateTime!, $code: String!, $message: String!, $userId: ID!) {\n  logMembershipEvent(date: $date, code: $code, userId: $userId, message: $message) {\n    message\n  }\n}": types.Log_Membership_Item_MutationDocument,
    "query MEMBERSHIP_LOG_QUERY($username: String) {\n  user(username: $username) {\n    id\n    membershipLog {\n      id\n      time\n      message\n      messageCode\n      logger {\n        id\n        username\n        firstName\n        lastName\n      }\n    }\n  }\n}": types.Membership_Log_QueryDocument,
    "query MESSAGE_QUERY {\n  myself {\n    id\n    role\n    accountStatus\n    username\n  }\n  getMessageRecipients {\n    id\n    username\n    firstName\n    lastName\n  }\n}": types.Message_QueryDocument,
    "mutation SEND_MESSAGE_MUTATION($to: [String!]!, $subject: String, $htmlText: String!) {\n  sendMessage(to: $to, subject: $subject, htmlText: $htmlText) {\n    message\n  }\n}": types.Send_Message_MutationDocument,
    "query PROFILE_QUERY($username: String) {\n  user(username: $username) {\n    id\n    username\n    joined\n    firstName\n    lastName\n    email\n    gender\n    birthdate\n    contactInfo {\n      id\n      street\n      city\n      state\n      zip\n      phone\n    }\n    preferences {\n      id\n      updatedAt\n      emergencyContactName\n      emergencyContactPhone\n      photoPermissions\n    }\n    comfortLevel\n  }\n}": types.Profile_QueryDocument,
    "query MEMBER_PROFILE_QUERY($username: String) {\n  user(username: $username) {\n    id\n    firstName\n    lastName\n    username\n    gender\n    birthdate\n    email\n    joined\n    avatar {\n      id\n      publicId\n      url\n      smallUrl\n    }\n    contactInfo {\n      id\n      street\n      city\n      state\n      zip\n      phone\n    }\n    preferences {\n      id\n      emergencyContactName\n      emergencyContactPhone\n      photoPermissions\n    }\n    comfortLevel\n  }\n}": types.Member_Profile_QueryDocument,
    "query SELF_PROFILE_QUERY {\n  user: myself {\n    id\n    accountType\n    accountStatus\n    firstName\n    lastName\n    username\n    gender\n    birthdate\n    email\n    joined\n    avatar {\n      id\n      publicId\n      url\n      smallUrl\n    }\n    contactInfo {\n      id\n      street\n      city\n      state\n      zip\n      phone\n    }\n    preferences {\n      id\n      emergencyContactName\n      emergencyContactPhone\n      photoPermissions\n    }\n    comfortLevel\n  }\n}": types.Self_Profile_QueryDocument,
    "mutation USER_UPDATE_PROFILE_MUTATION($id: ID!, $firstName: String!, $lastName: String!, $username: String!, $gender: String!, $birthdate: DateTime!, $joined: DateTime, $contactInfoId: ID, $street: String!, $city: String!, $state: String!, $zip: String!, $phone: String!, $preferencesId: ID, $emergencyContactName: String!, $emergencyContactPhone: String!, $comfortLevel: TrailDifficulty) {\n  updateUserProfileSettings(\n    data: {firstName: $firstName, lastName: $lastName, username: $username, gender: $gender, birthdate: $birthdate, joined: $joined, contactInfoId: $contactInfoId, street: $street, city: $city, state: $state, zip: $zip, phone: $phone, preferencesId: $preferencesId, emergencyContactName: $emergencyContactName, emergencyContactPhone: $emergencyContactPhone, comfortLevel: $comfortLevel}\n    id: $id\n  ) {\n    message\n  }\n}": types.User_Update_Profile_MutationDocument,
    "query PROFILE_HEADER_QUERY($username: String) {\n  user(username: $username) {\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    joined\n    role\n    username\n    titles\n    office\n    accountType\n    rig {\n      image {\n        id\n        url\n      }\n    }\n  }\n}": types.Profile_Header_QueryDocument,
    "query RIGBOOK_QUERY {\n  president: getOfficer(office: PRESIDENT) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    office\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n  vicePresident: getOfficer(office: VICE_PRESIDENT) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    office\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n  secretary: getOfficer(office: SECRETARY) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    office\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n  treasurer: getOfficer(office: TREASURER) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    office\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n  membership: getMembers(\n    accountTypes: [FULL, ASSOCIATE, EMERITUS]\n    accountStatuses: [ACTIVE, PAST_DUE]\n  ) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n}": types.Rigbook_QueryDocument,
    "query MEMBERSHIP_QUERY($accountStatus: [AccountStatus], $accountType: [AccountType], $role: [Role], $office: [Office], $titles: [Title]) {\n  users(\n    accountStatus: $accountStatus\n    accountType: $accountType\n    role: $role\n    office: $office\n    titles: $titles\n  ) {\n    username\n    id\n    firstName\n    lastName\n    avatar {\n      id\n      smallUrl\n    }\n    accountType\n    contactInfo {\n      id\n      phone\n    }\n  }\n}": types.Membership_QueryDocument,
    "query ACTIVITY_QUERY($username: String!) {\n  user(username: $username) {\n    id\n    activityLog {\n      id\n      time\n      message\n    }\n  }\n}": types.Activity_QueryDocument,
    "mutation USER_UPDATE_RIG_MUTATION($id: ID, $year: Int, $make: String, $model: String, $trim: String, $name: String, $outfitLevel: OutfitLevel, $mods: [String]) {\n  updateVehicle(\n    id: $id\n    vehicle: {year: $year, make: $make, model: $model, trim: $trim, name: $name, outfitLevel: $outfitLevel, mods: $mods}\n  ) {\n    message\n  }\n}": types.User_Update_Rig_MutationDocument,
    "query USER_RIG {\n  user {\n    id\n    rig {\n      image {\n        id\n        publicId\n        url\n      }\n    }\n    vehicle {\n      id\n      year\n      make\n      model\n      trim\n      name\n      outfitLevel\n      mods\n    }\n  }\n}": types.User_RigDocument,
    "query GARAGE_QUERY($username: String!) {\n  user(username: $username) {\n    id\n    firstName\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n      name\n      outfitLevel\n      mods\n    }\n  }\n}": types.Garage_QueryDocument,
    "mutation DELETE_RIG($rig: CloudinaryImageInput!) {\n  deleteRig(rig: $rig) {\n    message\n  }\n}": types.Delete_RigDocument,
    "mutation UPDATE_RIG($data: ImageUpdateInput!) {\n  updateRig(data: $data) {\n    message\n  }\n}": types.Update_RigDocument,
    "query CREATE_ELECTION_CANDIDATES_QUERY {\n  electionCandidates(accountType: FULL, accountStatus: ACTIVE) {\n    id\n    firstName\n    lastName\n    avatar {\n      url\n    }\n  }\n}": types.Create_Election_Candidates_QueryDocument,
    "query EDIT_ELECTION_CANDIDATES_QUERY($id: ID!) {\n  getElection(id: $id) {\n    id\n    electionName\n    startTime\n    endTime\n    races {\n      id\n      title\n      desc\n      candidates {\n        id\n        firstName\n        lastName\n        avatar {\n          url\n        }\n      }\n      results {\n        candidate {\n          id\n        }\n        count\n      }\n    }\n  }\n  electionCandidates(accountType: FULL, accountStatus: ACTIVE) {\n    id\n    firstName\n    lastName\n    avatar {\n      url\n    }\n  }\n}": types.Edit_Election_Candidates_QueryDocument,
    "query GET_ELECTION_QUERY($id: ID!) {\n  getElection(id: $id) {\n    electionName\n    races {\n      id\n      title\n      candidates {\n        id\n        joined\n        firstName\n        lastName\n        username\n        role\n        avatar {\n          url\n        }\n        vehicle {\n          year\n          make\n          model\n          trim\n          image {\n            id\n            smallUrl\n          }\n        }\n      }\n    }\n  }\n}": types.Get_Election_QueryDocument,
    "query GET_USER_VOTE($ballot: ID) {\n  getUserVote(ballot: $ballot) {\n    candidate {\n      id\n    }\n  }\n}": types.Get_User_VoteDocument,
    "query GET_ACTIVE_ELECTIONS {\n  getActiveElections {\n    id\n    electionName\n    endTime\n  }\n}": types.Get_Active_ElectionsDocument,
    "mutation SUBMIT_ELECTION_MUTATION($election: ElectionInput!) {\n  submitElection(election: $election) {\n    id\n  }\n}": types.Submit_Election_MutationDocument,
    "mutation LOG_ACTIVITY_MESSAGE($message: String!, $messageCode: String!, $time: DateTime!, $username: String!, $link: String) {\n  logActivityEvent(\n    message: $message\n    messageCode: $messageCode\n    time: $time\n    username: $username\n    link: $link\n  ) {\n    message\n  }\n}": types.Log_Activity_MessageDocument,
    "mutation LOG_MEMBERSHIP_MESSAGE($date: DateTime!, $code: String!, $message: String!, $userId: ID!) {\n  logMembershipEvent(message: $message, code: $code, date: $date, userId: $userId) {\n    message\n  }\n}": types.Log_Membership_MessageDocument,
    "query CURRENT_USER_QUERY {\n  myself {\n    id\n    username\n    email\n    firstName\n    role\n    accountStatus\n    accountType\n    avatar {\n      id\n      url\n      smallUrl\n    }\n  }\n}": types.Current_User_QueryDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ALL_USERS_QUERY {\n  users {\n    id\n    firstName\n    lastName\n    email\n    role\n    accountStatus\n    accountType\n    office\n  }\n}"): (typeof documents)["query ALL_USERS_QUERY {\n  users {\n    id\n    firstName\n    lastName\n    email\n    role\n    accountStatus\n    accountType\n    office\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UPDATE_ACCOUNT_STATUS_MUTATION($accountStatus: AccountStatus, $userId: ID!) {\n  updateAccountStatus(accountStatus: $accountStatus, userId: $userId) {\n    id\n    accountStatus\n  }\n}"): (typeof documents)["mutation UPDATE_ACCOUNT_STATUS_MUTATION($accountStatus: AccountStatus, $userId: ID!) {\n  updateAccountStatus(accountStatus: $accountStatus, userId: $userId) {\n    id\n    accountStatus\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UPDATE_ACCOUNT_TYPE_MUTATION($accountType: AccountType, $userId: ID!) {\n  updateAccountType(accountType: $accountType, userId: $userId) {\n    id\n    accountType\n  }\n}"): (typeof documents)["mutation UPDATE_ACCOUNT_TYPE_MUTATION($accountType: AccountType, $userId: ID!) {\n  updateAccountType(accountType: $accountType, userId: $userId) {\n    id\n    accountType\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UPDATE_OFFICE_MUTATION($office: Office, $userId: ID!) {\n  updateOffice(office: $office, userId: $userId) {\n    id\n    office\n  }\n}"): (typeof documents)["mutation UPDATE_OFFICE_MUTATION($office: Office, $userId: ID!) {\n  updateOffice(office: $office, userId: $userId) {\n    id\n    office\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UPDATE_ROLE_MUTATION($role: Role, $userId: ID!) {\n  updateRole(role: $role, userId: $userId) {\n    id\n    role\n  }\n}"): (typeof documents)["mutation UPDATE_ROLE_MUTATION($role: Role, $userId: ID!) {\n  updateRole(role: $role, userId: $userId) {\n    id\n    role\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UPDATE_TITLE_MUTATION($titles: [Title], $userId: ID!) {\n  updateTitles(titles: $titles, userId: $userId) {\n    id\n    titles\n  }\n}"): (typeof documents)["mutation UPDATE_TITLE_MUTATION($titles: [Title], $userId: ID!) {\n  updateTitles(titles: $titles, userId: $userId) {\n    id\n    titles\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation NEW_ACCOUNTS_APPROVE_MUTATION($userId: ID!) {\n  unlockNewAccount(userId: $userId) {\n    message\n  }\n}"): (typeof documents)["mutation NEW_ACCOUNTS_APPROVE_MUTATION($userId: ID!) {\n  unlockNewAccount(userId: $userId) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query NEW_ACCOUNTS_QUERY {\n  users(accountStatus: [LOCKED], accountType: [GUEST]) {\n    id\n    firstName\n    lastName\n    username\n    birthdate\n    gender\n  }\n}"): (typeof documents)["query NEW_ACCOUNTS_QUERY {\n  users(accountStatus: [LOCKED], accountType: [GUEST]) {\n    id\n    firstName\n    lastName\n    username\n    birthdate\n    gender\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation NEW_ACCOUNTS_REJECT_MUTATION($userId: ID!, $reason: String!) {\n  rejectNewAccount(userId: $userId, reason: $reason) {\n    message\n  }\n}"): (typeof documents)["mutation NEW_ACCOUNTS_REJECT_MUTATION($userId: ID!, $reason: String!) {\n  rejectNewAccount(userId: $userId, reason: $reason) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ADMIN_PROFILE_HEADER_QUERY($username: String) {\n  user(username: $username) {\n    id\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    joined\n    role\n    username\n    titles\n    office\n    accountType\n    rig {\n      image {\n        id\n        url\n      }\n    }\n  }\n}"): (typeof documents)["query ADMIN_PROFILE_HEADER_QUERY($username: String) {\n  user(username: $username) {\n    id\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    joined\n    role\n    username\n    titles\n    office\n    accountType\n    rig {\n      image {\n        id\n        url\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query QUORUM_QUERY {\n  users(accountStatus: [ACTIVE, PAST_DUE], accountType: [FULL]) {\n    username\n    id\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    accountType\n    accountStatus\n  }\n}"): (typeof documents)["query QUORUM_QUERY {\n  users(accountStatus: [ACTIVE, PAST_DUE], accountType: [FULL]) {\n    username\n    id\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    accountType\n    accountStatus\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DOCS_QUERY {\n  docs: getDocs {\n    bylaws {\n      name\n      link\n      date\n    }\n    sors {\n      name\n      link\n      date\n    }\n    archives {\n      year\n      monthlyArchives {\n        month\n        meetingMinutes {\n          name\n          link\n          date\n        }\n        newsletter {\n          name\n          link\n          date\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query DOCS_QUERY {\n  docs: getDocs {\n    bylaws {\n      name\n      link\n      date\n    }\n    sors {\n      name\n      link\n      date\n    }\n    archives {\n      year\n      monthlyArchives {\n        month\n        meetingMinutes {\n          name\n          link\n          date\n        }\n        newsletter {\n          name\n          link\n          date\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation DELETE_AVATAR($avatar: CloudinaryImageInput!) {\n  deleteAvatar(avatar: $avatar) {\n    message\n  }\n}"): (typeof documents)["mutation DELETE_AVATAR($avatar: CloudinaryImageInput!) {\n  deleteAvatar(avatar: $avatar) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UPDATE_AVATAR($data: ImageUpdateInput!) {\n  updateAvatar(data: $data) {\n    message\n  }\n}"): (typeof documents)["mutation UPDATE_AVATAR($data: ImageUpdateInput!) {\n  updateAvatar(data: $data) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DASHBOARD_UPCOMING_EVENTS_QUERY {\n  myself {\n    id\n    accountType\n  }\n  events: getUpcomingEvents(count: 7) {\n    id\n    title\n    startTime\n    membersOnly\n    rsvps {\n      member {\n        id\n      }\n      status\n    }\n  }\n}"): (typeof documents)["query DASHBOARD_UPCOMING_EVENTS_QUERY {\n  myself {\n    id\n    accountType\n  }\n  events: getUpcomingEvents(count: 7) {\n    id\n    title\n    startTime\n    membersOnly\n    rsvps {\n      member {\n        id\n      }\n      status\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query NEXT_EVENT_QUERY {\n  myself {\n    id\n    accountType\n  }\n  event: getNextEvent {\n    id\n    title\n    startTime\n    description\n    featuredImage {\n      id\n      url\n    }\n    startTime\n    endTime\n    membersOnly\n    rsvps {\n      id\n      member {\n        id\n      }\n      status\n    }\n    host {\n      id\n      firstName\n      lastName\n      avatar {\n        id\n        url\n      }\n    }\n    trailDifficulty\n    trail {\n      id\n      name\n      featuredImage {\n        id\n        url\n      }\n    }\n  }\n}"): (typeof documents)["query NEXT_EVENT_QUERY {\n  myself {\n    id\n    accountType\n  }\n  event: getNextEvent {\n    id\n    title\n    startTime\n    description\n    featuredImage {\n      id\n      url\n    }\n    startTime\n    endTime\n    membersOnly\n    rsvps {\n      id\n      member {\n        id\n      }\n      status\n    }\n    host {\n      id\n      firstName\n      lastName\n      avatar {\n        id\n        url\n      }\n    }\n    trailDifficulty\n    trail {\n      id\n      name\n      featuredImage {\n        id\n        url\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RSVP_MUTATION($rsvp: RSVPInput) {\n  setRSVP(rsvp: $rsvp) {\n    message\n  }\n}"): (typeof documents)["mutation RSVP_MUTATION($rsvp: RSVPInput) {\n  setRSVP(rsvp: $rsvp) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CREATE_EVENT_MUTATION($type: String!, $title: String!, $description: String, $startTime: DateTime!, $endTime: DateTime!, $address: String, $trailDifficulty: TrailDifficulty, $trailNotes: String, $rallyAddress: String, $membersOnly: Boolean, $maxAttendees: Int, $maxRigs: Int, $changeDisabled: Boolean, $host: String!, $trail: String, $featuredImage: String, $newFeaturedImage: CloudinaryImageInput) {\n  createEvent(\n    event: {type: $type, title: $title, description: $description, startTime: $startTime, endTime: $endTime, address: $address, trailDifficulty: $trailDifficulty, trailNotes: $trailNotes, rallyAddress: $rallyAddress, membersOnly: $membersOnly, maxAttendees: $maxAttendees, maxRigs: $maxRigs, changeDisabled: $changeDisabled, host: $host, trail: $trail, featuredImage: $featuredImage, newFeaturedImage: $newFeaturedImage}\n  ) {\n    message\n  }\n}"): (typeof documents)["mutation CREATE_EVENT_MUTATION($type: String!, $title: String!, $description: String, $startTime: DateTime!, $endTime: DateTime!, $address: String, $trailDifficulty: TrailDifficulty, $trailNotes: String, $rallyAddress: String, $membersOnly: Boolean, $maxAttendees: Int, $maxRigs: Int, $changeDisabled: Boolean, $host: String!, $trail: String, $featuredImage: String, $newFeaturedImage: CloudinaryImageInput) {\n  createEvent(\n    event: {type: $type, title: $title, description: $description, startTime: $startTime, endTime: $endTime, address: $address, trailDifficulty: $trailDifficulty, trailNotes: $trailNotes, rallyAddress: $rallyAddress, membersOnly: $membersOnly, maxAttendees: $maxAttendees, maxRigs: $maxRigs, changeDisabled: $changeDisabled, host: $host, trail: $trail, featuredImage: $featuredImage, newFeaturedImage: $newFeaturedImage}\n  ) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SETUP_NEW_EVENT_QUERY {\n  myself {\n    id\n    username\n    firstName\n    lastName\n  }\n  runLeaders: getRunLeaders {\n    id\n    username\n    firstName\n    lastName\n  }\n  trails: getTrails {\n    id\n    name\n  }\n}"): (typeof documents)["query SETUP_NEW_EVENT_QUERY {\n  myself {\n    id\n    username\n    firstName\n    lastName\n  }\n  runLeaders: getRunLeaders {\n    id\n    username\n    firstName\n    lastName\n  }\n  trails: getTrails {\n    id\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation DELETE_EVENT_MUTATION($id: ID!) {\n  deleteEvent(id: $id) {\n    message\n  }\n}"): (typeof documents)["mutation DELETE_EVENT_MUTATION($id: ID!) {\n  deleteEvent(id: $id) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation EDIT_EVENT_MUTATION($id: ID!, $type: String!, $title: String!, $description: String, $startTime: DateTime!, $endTime: DateTime!, $address: String, $trailDifficulty: TrailDifficulty, $trailNotes: String, $rallyAddress: String, $membersOnly: Boolean, $host: String!, $trail: String, $featuredImage: String, $newFeaturedImage: CloudinaryImageInput, $maxAttendees: Int, $maxRigs: Int, $changeDisabled: Boolean) {\n  updateEvent(\n    id: $id\n    event: {type: $type, title: $title, description: $description, startTime: $startTime, endTime: $endTime, address: $address, trailDifficulty: $trailDifficulty, trailNotes: $trailNotes, rallyAddress: $rallyAddress, membersOnly: $membersOnly, host: $host, trail: $trail, featuredImage: $featuredImage, newFeaturedImage: $newFeaturedImage, maxAttendees: $maxAttendees, maxRigs: $maxRigs, changeDisabled: $changeDisabled}\n  ) {\n    message\n  }\n}"): (typeof documents)["mutation EDIT_EVENT_MUTATION($id: ID!, $type: String!, $title: String!, $description: String, $startTime: DateTime!, $endTime: DateTime!, $address: String, $trailDifficulty: TrailDifficulty, $trailNotes: String, $rallyAddress: String, $membersOnly: Boolean, $host: String!, $trail: String, $featuredImage: String, $newFeaturedImage: CloudinaryImageInput, $maxAttendees: Int, $maxRigs: Int, $changeDisabled: Boolean) {\n  updateEvent(\n    id: $id\n    event: {type: $type, title: $title, description: $description, startTime: $startTime, endTime: $endTime, address: $address, trailDifficulty: $trailDifficulty, trailNotes: $trailNotes, rallyAddress: $rallyAddress, membersOnly: $membersOnly, host: $host, trail: $trail, featuredImage: $featuredImage, newFeaturedImage: $newFeaturedImage, maxAttendees: $maxAttendees, maxRigs: $maxRigs, changeDisabled: $changeDisabled}\n  ) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SETUP_EXISTING_EVENT_QUERY($eventId: ID!) {\n  event: getEvent(eventId: $eventId) {\n    id\n    type\n    title\n    description\n    featuredImage {\n      id\n      url\n      publicId\n    }\n    host {\n      id\n      firstName\n      lastName\n      avatar {\n        id\n        smallUrl\n      }\n      username\n    }\n    startTime\n    endTime\n    membersOnly\n    rsvps {\n      id\n      member {\n        id\n        firstName\n        lastName\n        avatar {\n          id\n          smallUrl\n        }\n      }\n      status\n    }\n    address\n    trailDifficulty\n    trailNotes\n    trail {\n      id\n      slug\n      name\n      address\n      avgDifficulty\n      avgRatings\n      currentConditions\n      conditionsLastReported\n      favoriteCount\n    }\n    rallyAddress\n    maxAttendees\n    maxRigs\n    changeDisabled\n  }\n  runLeaders: getRunLeaders {\n    id\n    username\n    firstName\n    lastName\n  }\n  trails: getTrails {\n    id\n    name\n  }\n}"): (typeof documents)["query SETUP_EXISTING_EVENT_QUERY($eventId: ID!) {\n  event: getEvent(eventId: $eventId) {\n    id\n    type\n    title\n    description\n    featuredImage {\n      id\n      url\n      publicId\n    }\n    host {\n      id\n      firstName\n      lastName\n      avatar {\n        id\n        smallUrl\n      }\n      username\n    }\n    startTime\n    endTime\n    membersOnly\n    rsvps {\n      id\n      member {\n        id\n        firstName\n        lastName\n        avatar {\n          id\n          smallUrl\n        }\n      }\n      status\n    }\n    address\n    trailDifficulty\n    trailNotes\n    trail {\n      id\n      slug\n      name\n      address\n      avgDifficulty\n      avgRatings\n      currentConditions\n      conditionsLastReported\n      favoriteCount\n    }\n    rallyAddress\n    maxAttendees\n    maxRigs\n    changeDisabled\n  }\n  runLeaders: getRunLeaders {\n    id\n    username\n    firstName\n    lastName\n  }\n  trails: getTrails {\n    id\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation DELETE_EVENT_IMAGE($avatar: CloudinaryImageInput!) {\n  deleteAvatar(avatar: $avatar) {\n    message\n  }\n}"): (typeof documents)["mutation DELETE_EVENT_IMAGE($avatar: CloudinaryImageInput!) {\n  deleteAvatar(avatar: $avatar) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UPDATE_EVENT_IMAGE($data: ImageUpdateInput!) {\n  updateAvatar(data: $data) {\n    message\n  }\n}"): (typeof documents)["mutation UPDATE_EVENT_IMAGE($data: ImageUpdateInput!) {\n  updateAvatar(data: $data) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query EVENT_QUERY($eventId: ID!) {\n  event: getEvent(eventId: $eventId) {\n    id\n    type\n  }\n}"): (typeof documents)["query EVENT_QUERY($eventId: ID!) {\n  event: getEvent(eventId: $eventId) {\n    id\n    type\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PAST_EVENTS_QUERY($count: Int, $page: Int) {\n  myself {\n    id\n    firstName\n    lastName\n    accountType\n    avatar {\n      id\n      smallUrl\n    }\n  }\n  totalEvents: pastEventsCount {\n    count\n  }\n  events: getPastEvents(count: $count, page: $page) {\n    id\n    title\n    featuredImage {\n      id\n      smallUrl\n    }\n    startTime\n    endTime\n    membersOnly\n    host {\n      id\n      firstName\n      lastName\n    }\n    address\n    rallyAddress\n    trailDifficulty\n    maxRigs\n    maxAttendees\n    trail {\n      id\n      name\n      avgDifficulty\n      featuredImage {\n        id\n        smallUrl\n      }\n    }\n    rsvps {\n      member {\n        id\n        firstName\n        lastName\n        avatar {\n          id\n          smallUrl\n        }\n      }\n      status\n      isRider\n      guestCount\n    }\n  }\n}"): (typeof documents)["query PAST_EVENTS_QUERY($count: Int, $page: Int) {\n  myself {\n    id\n    firstName\n    lastName\n    accountType\n    avatar {\n      id\n      smallUrl\n    }\n  }\n  totalEvents: pastEventsCount {\n    count\n  }\n  events: getPastEvents(count: $count, page: $page) {\n    id\n    title\n    featuredImage {\n      id\n      smallUrl\n    }\n    startTime\n    endTime\n    membersOnly\n    host {\n      id\n      firstName\n      lastName\n    }\n    address\n    rallyAddress\n    trailDifficulty\n    maxRigs\n    maxAttendees\n    trail {\n      id\n      name\n      avgDifficulty\n      featuredImage {\n        id\n        smallUrl\n      }\n    }\n    rsvps {\n      member {\n        id\n        firstName\n        lastName\n        avatar {\n          id\n          smallUrl\n        }\n      }\n      status\n      isRider\n      guestCount\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query UPCOMING_EVENTS_QUERY($count: Int, $page: Int) {\n  myself {\n    id\n    firstName\n    lastName\n    accountType\n    avatar {\n      id\n      smallUrl\n    }\n  }\n  totalEvents: upcomingEventsCount {\n    count\n  }\n  events: getUpcomingEvents(count: $count, page: $page) {\n    id\n    title\n    featuredImage {\n      id\n      smallUrl\n    }\n    startTime\n    endTime\n    membersOnly\n    host {\n      id\n      firstName\n      lastName\n    }\n    address\n    rallyAddress\n    trailDifficulty\n    maxRigs\n    maxAttendees\n    trail {\n      id\n      name\n      avgDifficulty\n      featuredImage {\n        id\n        smallUrl\n      }\n    }\n    rsvps {\n      member {\n        id\n        firstName\n        lastName\n        avatar {\n          id\n          smallUrl\n        }\n      }\n      status\n      isRider\n      guestCount\n    }\n  }\n}"): (typeof documents)["query UPCOMING_EVENTS_QUERY($count: Int, $page: Int) {\n  myself {\n    id\n    firstName\n    lastName\n    accountType\n    avatar {\n      id\n      smallUrl\n    }\n  }\n  totalEvents: upcomingEventsCount {\n    count\n  }\n  events: getUpcomingEvents(count: $count, page: $page) {\n    id\n    title\n    featuredImage {\n      id\n      smallUrl\n    }\n    startTime\n    endTime\n    membersOnly\n    host {\n      id\n      firstName\n      lastName\n    }\n    address\n    rallyAddress\n    trailDifficulty\n    maxRigs\n    maxAttendees\n    trail {\n      id\n      name\n      avgDifficulty\n      featuredImage {\n        id\n        smallUrl\n      }\n    }\n    rsvps {\n      member {\n        id\n        firstName\n        lastName\n        avatar {\n          id\n          smallUrl\n        }\n      }\n      status\n      isRider\n      guestCount\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query NON_RUN_EVENT_QUERY($eventId: ID!) {\n  myself {\n    id\n    accountType\n  }\n  event: getEvent(eventId: $eventId) {\n    id\n    type\n    title\n    description\n    featuredImage {\n      id\n      url\n    }\n    host {\n      id\n      firstName\n      lastName\n      avatar {\n        id\n        smallUrl\n      }\n    }\n    startTime\n    endTime\n    membersOnly\n    rsvps {\n      id\n      member {\n        id\n        firstName\n        lastName\n        username\n        accountType\n        email\n        runsAttendedCount\n        contactInfo {\n          id\n          city\n          state\n        }\n        avatar {\n          id\n          url\n        }\n      }\n      status\n      guestCount\n    }\n    address\n    maxAttendees\n    changeDisabled\n  }\n}"): (typeof documents)["query NON_RUN_EVENT_QUERY($eventId: ID!) {\n  myself {\n    id\n    accountType\n  }\n  event: getEvent(eventId: $eventId) {\n    id\n    type\n    title\n    description\n    featuredImage {\n      id\n      url\n    }\n    host {\n      id\n      firstName\n      lastName\n      avatar {\n        id\n        smallUrl\n      }\n    }\n    startTime\n    endTime\n    membersOnly\n    rsvps {\n      id\n      member {\n        id\n        firstName\n        lastName\n        username\n        accountType\n        email\n        runsAttendedCount\n        contactInfo {\n          id\n          city\n          state\n        }\n        avatar {\n          id\n          url\n        }\n      }\n      status\n      guestCount\n    }\n    address\n    maxAttendees\n    changeDisabled\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query RUN_EVENT_QUERY($eventId: ID!) {\n  myself {\n    id\n    accountType\n    vehicle {\n      id\n      year\n      make\n      model\n    }\n  }\n  event: getEvent(eventId: $eventId) {\n    id\n    type\n    title\n    description\n    featuredImage {\n      id\n      url\n    }\n    host {\n      id\n      firstName\n      lastName\n      avatar {\n        id\n        smallUrl\n      }\n    }\n    startTime\n    endTime\n    membersOnly\n    trailDifficulty\n    rsvps {\n      id\n      member {\n        id\n        firstName\n        lastName\n        username\n        accountType\n        email\n        runsAttendedCount\n        contactInfo {\n          id\n          city\n          state\n        }\n        avatar {\n          id\n          url\n        }\n        vehicle {\n          id\n          year\n          make\n          model\n          trim\n        }\n      }\n      status\n      guestCount\n      isRider\n      equipment\n    }\n    address\n    trail {\n      id\n      description\n      name\n      address\n      avgDifficulty\n      avgRatings\n      conditionsLastReported\n      favoriteCount\n      trailheadCoords\n      featuredImage {\n        id\n        url\n      }\n    }\n    rallyAddress\n    maxRigs\n    maxAttendees\n  }\n}"): (typeof documents)["query RUN_EVENT_QUERY($eventId: ID!) {\n  myself {\n    id\n    accountType\n    vehicle {\n      id\n      year\n      make\n      model\n    }\n  }\n  event: getEvent(eventId: $eventId) {\n    id\n    type\n    title\n    description\n    featuredImage {\n      id\n      url\n    }\n    host {\n      id\n      firstName\n      lastName\n      avatar {\n        id\n        smallUrl\n      }\n    }\n    startTime\n    endTime\n    membersOnly\n    trailDifficulty\n    rsvps {\n      id\n      member {\n        id\n        firstName\n        lastName\n        username\n        accountType\n        email\n        runsAttendedCount\n        contactInfo {\n          id\n          city\n          state\n        }\n        avatar {\n          id\n          url\n        }\n        vehicle {\n          id\n          year\n          make\n          model\n          trim\n        }\n      }\n      status\n      guestCount\n      isRider\n      equipment\n    }\n    address\n    trail {\n      id\n      description\n      name\n      address\n      avgDifficulty\n      avgRatings\n      conditionsLastReported\n      favoriteCount\n      trailheadCoords\n      featuredImage {\n        id\n        url\n      }\n    }\n    rallyAddress\n    maxRigs\n    maxAttendees\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CHANGE_EMAIL_MUTATION($email: String!) {\n  changeEmail(email: $email) {\n    message\n  }\n}"): (typeof documents)["mutation CHANGE_EMAIL_MUTATION($email: String!) {\n  changeEmail(email: $email) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CHANGE_PASSWORD_MUTATION($password: String!, $confirmPassword: String!) {\n  changePassword(password: $password, confirmPassword: $confirmPassword) {\n    message\n  }\n}"): (typeof documents)["mutation CHANGE_PASSWORD_MUTATION($password: String!, $confirmPassword: String!) {\n  changePassword(password: $password, confirmPassword: $confirmPassword) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation REQUEST_RESET_MUTATION($email: String!) {\n  requestReset(email: $email) {\n    message\n  }\n}"): (typeof documents)["mutation REQUEST_RESET_MUTATION($email: String!) {\n  requestReset(email: $email) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation LOGIN_MUTATION($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    message\n  }\n}"): (typeof documents)["mutation LOGIN_MUTATION($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation LOGOUT_MUTATION {\n  logout {\n    message\n  }\n}"): (typeof documents)["mutation LOGOUT_MUTATION {\n  logout {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation REGISTER_MUTATION($firstName: String, $lastName: String, $email: String!, $confirmEmail: String!, $source: String!) {\n  register(\n    firstName: $firstName\n    lastName: $lastName\n    email: $email\n    confirmEmail: $confirmEmail\n    source: $source\n  ) {\n    message\n  }\n}"): (typeof documents)["mutation REGISTER_MUTATION($firstName: String, $lastName: String, $email: String!, $confirmEmail: String!, $source: String!) {\n  register(\n    firstName: $firstName\n    lastName: $lastName\n    email: $email\n    confirmEmail: $confirmEmail\n    source: $source\n  ) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RESET_MUTATION($resetToken: String!, $password: String!, $confirmPassword: String!) {\n  resetPassword(\n    resetToken: $resetToken\n    password: $password\n    confirmPassword: $confirmPassword\n  ) {\n    id\n    email\n    firstName\n  }\n}"): (typeof documents)["mutation RESET_MUTATION($resetToken: String!, $password: String!, $confirmPassword: String!) {\n  resetPassword(\n    resetToken: $resetToken\n    password: $password\n    confirmPassword: $confirmPassword\n  ) {\n    id\n    email\n    firstName\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query REGISTRATION_QUERY($token: String!) {\n  getRegistration(token: $token) {\n    id\n    email\n    firstName\n    lastName\n  }\n}"): (typeof documents)["query REGISTRATION_QUERY($token: String!) {\n  getRegistration(token: $token) {\n    id\n    email\n    firstName\n    lastName\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SIGNUP_MUTATION($email: String!, $firstName: String!, $lastName: String!, $password: String!, $username: String!, $gender: Gender!, $birthdate: DateTime!, $token: String!) {\n  signUp(\n    email: $email\n    firstName: $firstName\n    lastName: $lastName\n    password: $password\n    username: $username\n    gender: $gender\n    birthdate: $birthdate\n    token: $token\n  ) {\n    message\n  }\n}"): (typeof documents)["mutation SIGNUP_MUTATION($email: String!, $firstName: String!, $lastName: String!, $password: String!, $username: String!, $gender: Gender!, $birthdate: DateTime!, $token: String!) {\n  signUp(\n    email: $email\n    firstName: $firstName\n    lastName: $lastName\n    password: $password\n    username: $username\n    gender: $gender\n    birthdate: $birthdate\n    token: $token\n  ) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation PAY_DUES_MUTATION($data: DuesPaymentInput!) {\n  payMembershipDues(data: $data) {\n    message\n  }\n}"): (typeof documents)["mutation PAY_DUES_MUTATION($data: DuesPaymentInput!) {\n  payMembershipDues(data: $data) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SUBMIT_RUN_REPORT_MUTATION($id: ID!, $type: String!, $title: String!, $description: String, $startTime: DateTime!, $endTime: DateTime!, $address: String, $trailDifficulty: TrailDifficulty, $trailNotes: String, $rallyAddress: String, $membersOnly: Boolean, $host: String!, $trail: String, $featuredImage: String, $newFeaturedImage: CloudinaryImageInput, $maxAttendees: Int, $maxRigs: Int) {\n  updateEvent(\n    id: $id\n    event: {type: $type, title: $title, description: $description, startTime: $startTime, endTime: $endTime, address: $address, trailDifficulty: $trailDifficulty, trailNotes: $trailNotes, rallyAddress: $rallyAddress, membersOnly: $membersOnly, host: $host, trail: $trail, featuredImage: $featuredImage, newFeaturedImage: $newFeaturedImage, maxAttendees: $maxAttendees, maxRigs: $maxRigs}\n  ) {\n    message\n  }\n}"): (typeof documents)["mutation SUBMIT_RUN_REPORT_MUTATION($id: ID!, $type: String!, $title: String!, $description: String, $startTime: DateTime!, $endTime: DateTime!, $address: String, $trailDifficulty: TrailDifficulty, $trailNotes: String, $rallyAddress: String, $membersOnly: Boolean, $host: String!, $trail: String, $featuredImage: String, $newFeaturedImage: CloudinaryImageInput, $maxAttendees: Int, $maxRigs: Int) {\n  updateEvent(\n    id: $id\n    event: {type: $type, title: $title, description: $description, startTime: $startTime, endTime: $endTime, address: $address, trailDifficulty: $trailDifficulty, trailNotes: $trailNotes, rallyAddress: $rallyAddress, membersOnly: $membersOnly, host: $host, trail: $trail, featuredImage: $featuredImage, newFeaturedImage: $newFeaturedImage, maxAttendees: $maxAttendees, maxRigs: $maxRigs}\n  ) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CREATE_TRAIL_MUTATION($trail: TrailInput!) {\n  createTrail(trail: $trail) {\n    message\n  }\n}"): (typeof documents)["mutation CREATE_TRAIL_MUTATION($trail: TrailInput!) {\n  createTrail(trail: $trail) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation EDIT_TRAIL_MUTATION($trail: TrailInput!, $id: ID!) {\n  updateTrail(trail: $trail, id: $id) {\n    message\n  }\n}"): (typeof documents)["mutation EDIT_TRAIL_MUTATION($trail: TrailInput!, $id: ID!) {\n  updateTrail(trail: $trail, id: $id) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query EXISTING_TRAIL_QUERY($trailSlug: String!) {\n  trail: getTrail(slug: $trailSlug) {\n    id\n    name\n    slug\n    description\n    featuredImage {\n      id\n      url\n    }\n    trailheadCoords\n    address\n  }\n}"): (typeof documents)["query EXISTING_TRAIL_QUERY($trailSlug: String!) {\n  trail: getTrail(slug: $trailSlug) {\n    id\n    name\n    slug\n    description\n    featuredImage {\n      id\n      url\n    }\n    trailheadCoords\n    address\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UPDATE_TRAIL_IMAGE($id: String!, $image: CloudinaryImageInput!) {\n  updateTrailImage(id: $id, image: $image) {\n    message\n  }\n}"): (typeof documents)["mutation UPDATE_TRAIL_IMAGE($id: String!, $image: CloudinaryImageInput!) {\n  updateTrailImage(id: $id, image: $image) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TRAILS_QUERY {\n  trails: getTrails {\n    id\n    slug\n    name\n    description\n    featuredImage {\n      id\n      url\n    }\n    trailheadCoords\n    address\n    avgDifficulty\n    avgRatings\n    currentConditions\n    conditionsLastReported\n    favoriteCount\n    pastEvents {\n      id\n      title\n    }\n    visitors {\n      id\n      firstName\n    }\n  }\n}"): (typeof documents)["query TRAILS_QUERY {\n  trails: getTrails {\n    id\n    slug\n    name\n    description\n    featuredImage {\n      id\n      url\n    }\n    trailheadCoords\n    address\n    avgDifficulty\n    avgRatings\n    currentConditions\n    conditionsLastReported\n    favoriteCount\n    pastEvents {\n      id\n      title\n    }\n    visitors {\n      id\n      firstName\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ACCOUNT_FORM_QUERY {\n  myself {\n    id\n    email\n    accountType\n    accountStatus\n    eventsRSVPd {\n      status\n      event {\n        id\n        type\n        startTime\n      }\n    }\n  }\n  logItems: getMembershipLogItems(username: \"self\", messageCode: DUES_PAID) {\n    id\n    time\n    message\n    logger {\n      id\n      firstName\n      lastName\n    }\n  }\n}"): (typeof documents)["query ACCOUNT_FORM_QUERY {\n  myself {\n    id\n    email\n    accountType\n    accountStatus\n    eventsRSVPd {\n      status\n      event {\n        id\n        type\n        startTime\n      }\n    }\n  }\n  logItems: getMembershipLogItems(username: \"self\", messageCode: DUES_PAID) {\n    id\n    time\n    message\n    logger {\n      id\n      firstName\n      lastName\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ADMIN_OVERVIEW_QUERY($username: String!) {\n  user(username: $username) {\n    id\n    createdAt\n    joined\n    lastLogin\n  }\n  duesLastReceived: getDuesLastReceived(username: $username) {\n    time\n  }\n  meetings: getUserEvents(username: $username, eventType: MEETING) {\n    id\n    startTime\n  }\n  runs: getUserEvents(username: $username, eventType: RUN) {\n    id\n    startTime\n  }\n}"): (typeof documents)["query ADMIN_OVERVIEW_QUERY($username: String!) {\n  user(username: $username) {\n    id\n    createdAt\n    joined\n    lastLogin\n  }\n  duesLastReceived: getDuesLastReceived(username: $username) {\n    time\n  }\n  meetings: getUserEvents(username: $username, eventType: MEETING) {\n    id\n    startTime\n  }\n  runs: getUserEvents(username: $username, eventType: RUN) {\n    id\n    startTime\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query MEMBER_ADMIN_PROFILE_QUERY($username: String) {\n  user(username: $username) {\n    id\n    titles\n    office\n    role\n    accountStatus\n    accountType\n  }\n}"): (typeof documents)["query MEMBER_ADMIN_PROFILE_QUERY($username: String) {\n  user(username: $username) {\n    id\n    titles\n    office\n    role\n    accountStatus\n    accountType\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation USER_ADMIN_UPDATE_PROFILE_MUTATION($id: ID!, $titles: [Title], $office: String, $role: String!, $accountStatus: String!, $accountType: String!) {\n  updateUserAdminProfileSettings(\n    data: {titles: $titles, office: $office, role: $role, accountStatus: $accountStatus, accountType: $accountType}\n    id: $id\n  ) {\n    message\n  }\n}"): (typeof documents)["mutation USER_ADMIN_UPDATE_PROFILE_MUTATION($id: ID!, $titles: [Title], $office: String, $role: String!, $accountStatus: String!, $accountType: String!) {\n  updateUserAdminProfileSettings(\n    data: {titles: $titles, office: $office, role: $role, accountStatus: $accountStatus, accountType: $accountType}\n    id: $id\n  ) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation EDIT_NEWSLETTER_PREFS_MUTATION($action: NewsletterAction!, $list: NewsletterList!) {\n  editNewsletterPreferences(action: $action, list: $list) {\n    message\n  }\n}"): (typeof documents)["mutation EDIT_NEWSLETTER_PREFS_MUTATION($action: NewsletterAction!, $list: NewsletterList!) {\n  editNewsletterPreferences(action: $action, list: $list) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query NEWSLETTER_PREFS_QUERY {\n  membersPref: newsletterPreferences(list: MEMBERS) {\n    status\n  }\n  generalPref: newsletterPreferences(list: GENERAL) {\n    status\n  }\n}"): (typeof documents)["query NEWSLETTER_PREFS_QUERY {\n  membersPref: newsletterPreferences(list: MEMBERS) {\n    status\n  }\n  generalPref: newsletterPreferences(list: GENERAL) {\n    status\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation LOG_MEMBERSHIP_ITEM_MUTATION($date: DateTime!, $code: String!, $message: String!, $userId: ID!) {\n  logMembershipEvent(date: $date, code: $code, userId: $userId, message: $message) {\n    message\n  }\n}"): (typeof documents)["mutation LOG_MEMBERSHIP_ITEM_MUTATION($date: DateTime!, $code: String!, $message: String!, $userId: ID!) {\n  logMembershipEvent(date: $date, code: $code, userId: $userId, message: $message) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query MEMBERSHIP_LOG_QUERY($username: String) {\n  user(username: $username) {\n    id\n    membershipLog {\n      id\n      time\n      message\n      messageCode\n      logger {\n        id\n        username\n        firstName\n        lastName\n      }\n    }\n  }\n}"): (typeof documents)["query MEMBERSHIP_LOG_QUERY($username: String) {\n  user(username: $username) {\n    id\n    membershipLog {\n      id\n      time\n      message\n      messageCode\n      logger {\n        id\n        username\n        firstName\n        lastName\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query MESSAGE_QUERY {\n  myself {\n    id\n    role\n    accountStatus\n    username\n  }\n  getMessageRecipients {\n    id\n    username\n    firstName\n    lastName\n  }\n}"): (typeof documents)["query MESSAGE_QUERY {\n  myself {\n    id\n    role\n    accountStatus\n    username\n  }\n  getMessageRecipients {\n    id\n    username\n    firstName\n    lastName\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SEND_MESSAGE_MUTATION($to: [String!]!, $subject: String, $htmlText: String!) {\n  sendMessage(to: $to, subject: $subject, htmlText: $htmlText) {\n    message\n  }\n}"): (typeof documents)["mutation SEND_MESSAGE_MUTATION($to: [String!]!, $subject: String, $htmlText: String!) {\n  sendMessage(to: $to, subject: $subject, htmlText: $htmlText) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PROFILE_QUERY($username: String) {\n  user(username: $username) {\n    id\n    username\n    joined\n    firstName\n    lastName\n    email\n    gender\n    birthdate\n    contactInfo {\n      id\n      street\n      city\n      state\n      zip\n      phone\n    }\n    preferences {\n      id\n      updatedAt\n      emergencyContactName\n      emergencyContactPhone\n      photoPermissions\n    }\n    comfortLevel\n  }\n}"): (typeof documents)["query PROFILE_QUERY($username: String) {\n  user(username: $username) {\n    id\n    username\n    joined\n    firstName\n    lastName\n    email\n    gender\n    birthdate\n    contactInfo {\n      id\n      street\n      city\n      state\n      zip\n      phone\n    }\n    preferences {\n      id\n      updatedAt\n      emergencyContactName\n      emergencyContactPhone\n      photoPermissions\n    }\n    comfortLevel\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query MEMBER_PROFILE_QUERY($username: String) {\n  user(username: $username) {\n    id\n    firstName\n    lastName\n    username\n    gender\n    birthdate\n    email\n    joined\n    avatar {\n      id\n      publicId\n      url\n      smallUrl\n    }\n    contactInfo {\n      id\n      street\n      city\n      state\n      zip\n      phone\n    }\n    preferences {\n      id\n      emergencyContactName\n      emergencyContactPhone\n      photoPermissions\n    }\n    comfortLevel\n  }\n}"): (typeof documents)["query MEMBER_PROFILE_QUERY($username: String) {\n  user(username: $username) {\n    id\n    firstName\n    lastName\n    username\n    gender\n    birthdate\n    email\n    joined\n    avatar {\n      id\n      publicId\n      url\n      smallUrl\n    }\n    contactInfo {\n      id\n      street\n      city\n      state\n      zip\n      phone\n    }\n    preferences {\n      id\n      emergencyContactName\n      emergencyContactPhone\n      photoPermissions\n    }\n    comfortLevel\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SELF_PROFILE_QUERY {\n  user: myself {\n    id\n    accountType\n    accountStatus\n    firstName\n    lastName\n    username\n    gender\n    birthdate\n    email\n    joined\n    avatar {\n      id\n      publicId\n      url\n      smallUrl\n    }\n    contactInfo {\n      id\n      street\n      city\n      state\n      zip\n      phone\n    }\n    preferences {\n      id\n      emergencyContactName\n      emergencyContactPhone\n      photoPermissions\n    }\n    comfortLevel\n  }\n}"): (typeof documents)["query SELF_PROFILE_QUERY {\n  user: myself {\n    id\n    accountType\n    accountStatus\n    firstName\n    lastName\n    username\n    gender\n    birthdate\n    email\n    joined\n    avatar {\n      id\n      publicId\n      url\n      smallUrl\n    }\n    contactInfo {\n      id\n      street\n      city\n      state\n      zip\n      phone\n    }\n    preferences {\n      id\n      emergencyContactName\n      emergencyContactPhone\n      photoPermissions\n    }\n    comfortLevel\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation USER_UPDATE_PROFILE_MUTATION($id: ID!, $firstName: String!, $lastName: String!, $username: String!, $gender: String!, $birthdate: DateTime!, $joined: DateTime, $contactInfoId: ID, $street: String!, $city: String!, $state: String!, $zip: String!, $phone: String!, $preferencesId: ID, $emergencyContactName: String!, $emergencyContactPhone: String!, $comfortLevel: TrailDifficulty) {\n  updateUserProfileSettings(\n    data: {firstName: $firstName, lastName: $lastName, username: $username, gender: $gender, birthdate: $birthdate, joined: $joined, contactInfoId: $contactInfoId, street: $street, city: $city, state: $state, zip: $zip, phone: $phone, preferencesId: $preferencesId, emergencyContactName: $emergencyContactName, emergencyContactPhone: $emergencyContactPhone, comfortLevel: $comfortLevel}\n    id: $id\n  ) {\n    message\n  }\n}"): (typeof documents)["mutation USER_UPDATE_PROFILE_MUTATION($id: ID!, $firstName: String!, $lastName: String!, $username: String!, $gender: String!, $birthdate: DateTime!, $joined: DateTime, $contactInfoId: ID, $street: String!, $city: String!, $state: String!, $zip: String!, $phone: String!, $preferencesId: ID, $emergencyContactName: String!, $emergencyContactPhone: String!, $comfortLevel: TrailDifficulty) {\n  updateUserProfileSettings(\n    data: {firstName: $firstName, lastName: $lastName, username: $username, gender: $gender, birthdate: $birthdate, joined: $joined, contactInfoId: $contactInfoId, street: $street, city: $city, state: $state, zip: $zip, phone: $phone, preferencesId: $preferencesId, emergencyContactName: $emergencyContactName, emergencyContactPhone: $emergencyContactPhone, comfortLevel: $comfortLevel}\n    id: $id\n  ) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PROFILE_HEADER_QUERY($username: String) {\n  user(username: $username) {\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    joined\n    role\n    username\n    titles\n    office\n    accountType\n    rig {\n      image {\n        id\n        url\n      }\n    }\n  }\n}"): (typeof documents)["query PROFILE_HEADER_QUERY($username: String) {\n  user(username: $username) {\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    joined\n    role\n    username\n    titles\n    office\n    accountType\n    rig {\n      image {\n        id\n        url\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query RIGBOOK_QUERY {\n  president: getOfficer(office: PRESIDENT) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    office\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n  vicePresident: getOfficer(office: VICE_PRESIDENT) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    office\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n  secretary: getOfficer(office: SECRETARY) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    office\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n  treasurer: getOfficer(office: TREASURER) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    office\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n  membership: getMembers(\n    accountTypes: [FULL, ASSOCIATE, EMERITUS]\n    accountStatuses: [ACTIVE, PAST_DUE]\n  ) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n}"): (typeof documents)["query RIGBOOK_QUERY {\n  president: getOfficer(office: PRESIDENT) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    office\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n  vicePresident: getOfficer(office: VICE_PRESIDENT) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    office\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n  secretary: getOfficer(office: SECRETARY) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    office\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n  treasurer: getOfficer(office: TREASURER) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    office\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n  membership: getMembers(\n    accountTypes: [FULL, ASSOCIATE, EMERITUS]\n    accountStatuses: [ACTIVE, PAST_DUE]\n  ) {\n    username\n    id\n    email\n    firstName\n    lastName\n    avatar {\n      id\n      url\n    }\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    joined\n    titles\n    accountType\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query MEMBERSHIP_QUERY($accountStatus: [AccountStatus], $accountType: [AccountType], $role: [Role], $office: [Office], $titles: [Title]) {\n  users(\n    accountStatus: $accountStatus\n    accountType: $accountType\n    role: $role\n    office: $office\n    titles: $titles\n  ) {\n    username\n    id\n    firstName\n    lastName\n    avatar {\n      id\n      smallUrl\n    }\n    accountType\n    contactInfo {\n      id\n      phone\n    }\n  }\n}"): (typeof documents)["query MEMBERSHIP_QUERY($accountStatus: [AccountStatus], $accountType: [AccountType], $role: [Role], $office: [Office], $titles: [Title]) {\n  users(\n    accountStatus: $accountStatus\n    accountType: $accountType\n    role: $role\n    office: $office\n    titles: $titles\n  ) {\n    username\n    id\n    firstName\n    lastName\n    avatar {\n      id\n      smallUrl\n    }\n    accountType\n    contactInfo {\n      id\n      phone\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ACTIVITY_QUERY($username: String!) {\n  user(username: $username) {\n    id\n    activityLog {\n      id\n      time\n      message\n    }\n  }\n}"): (typeof documents)["query ACTIVITY_QUERY($username: String!) {\n  user(username: $username) {\n    id\n    activityLog {\n      id\n      time\n      message\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation USER_UPDATE_RIG_MUTATION($id: ID, $year: Int, $make: String, $model: String, $trim: String, $name: String, $outfitLevel: OutfitLevel, $mods: [String]) {\n  updateVehicle(\n    id: $id\n    vehicle: {year: $year, make: $make, model: $model, trim: $trim, name: $name, outfitLevel: $outfitLevel, mods: $mods}\n  ) {\n    message\n  }\n}"): (typeof documents)["mutation USER_UPDATE_RIG_MUTATION($id: ID, $year: Int, $make: String, $model: String, $trim: String, $name: String, $outfitLevel: OutfitLevel, $mods: [String]) {\n  updateVehicle(\n    id: $id\n    vehicle: {year: $year, make: $make, model: $model, trim: $trim, name: $name, outfitLevel: $outfitLevel, mods: $mods}\n  ) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query USER_RIG {\n  user {\n    id\n    rig {\n      image {\n        id\n        publicId\n        url\n      }\n    }\n    vehicle {\n      id\n      year\n      make\n      model\n      trim\n      name\n      outfitLevel\n      mods\n    }\n  }\n}"): (typeof documents)["query USER_RIG {\n  user {\n    id\n    rig {\n      image {\n        id\n        publicId\n        url\n      }\n    }\n    vehicle {\n      id\n      year\n      make\n      model\n      trim\n      name\n      outfitLevel\n      mods\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GARAGE_QUERY($username: String!) {\n  user(username: $username) {\n    id\n    firstName\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n      name\n      outfitLevel\n      mods\n    }\n  }\n}"): (typeof documents)["query GARAGE_QUERY($username: String!) {\n  user(username: $username) {\n    id\n    firstName\n    rig {\n      image {\n        id\n        url\n      }\n    }\n    vehicle {\n      id\n      make\n      model\n      year\n      trim\n      name\n      outfitLevel\n      mods\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation DELETE_RIG($rig: CloudinaryImageInput!) {\n  deleteRig(rig: $rig) {\n    message\n  }\n}"): (typeof documents)["mutation DELETE_RIG($rig: CloudinaryImageInput!) {\n  deleteRig(rig: $rig) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation UPDATE_RIG($data: ImageUpdateInput!) {\n  updateRig(data: $data) {\n    message\n  }\n}"): (typeof documents)["mutation UPDATE_RIG($data: ImageUpdateInput!) {\n  updateRig(data: $data) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CREATE_ELECTION_CANDIDATES_QUERY {\n  electionCandidates(accountType: FULL, accountStatus: ACTIVE) {\n    id\n    firstName\n    lastName\n    avatar {\n      url\n    }\n  }\n}"): (typeof documents)["query CREATE_ELECTION_CANDIDATES_QUERY {\n  electionCandidates(accountType: FULL, accountStatus: ACTIVE) {\n    id\n    firstName\n    lastName\n    avatar {\n      url\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query EDIT_ELECTION_CANDIDATES_QUERY($id: ID!) {\n  getElection(id: $id) {\n    id\n    electionName\n    startTime\n    endTime\n    races {\n      id\n      title\n      desc\n      candidates {\n        id\n        firstName\n        lastName\n        avatar {\n          url\n        }\n      }\n      results {\n        candidate {\n          id\n        }\n        count\n      }\n    }\n  }\n  electionCandidates(accountType: FULL, accountStatus: ACTIVE) {\n    id\n    firstName\n    lastName\n    avatar {\n      url\n    }\n  }\n}"): (typeof documents)["query EDIT_ELECTION_CANDIDATES_QUERY($id: ID!) {\n  getElection(id: $id) {\n    id\n    electionName\n    startTime\n    endTime\n    races {\n      id\n      title\n      desc\n      candidates {\n        id\n        firstName\n        lastName\n        avatar {\n          url\n        }\n      }\n      results {\n        candidate {\n          id\n        }\n        count\n      }\n    }\n  }\n  electionCandidates(accountType: FULL, accountStatus: ACTIVE) {\n    id\n    firstName\n    lastName\n    avatar {\n      url\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GET_ELECTION_QUERY($id: ID!) {\n  getElection(id: $id) {\n    electionName\n    races {\n      id\n      title\n      candidates {\n        id\n        joined\n        firstName\n        lastName\n        username\n        role\n        avatar {\n          url\n        }\n        vehicle {\n          year\n          make\n          model\n          trim\n          image {\n            id\n            smallUrl\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GET_ELECTION_QUERY($id: ID!) {\n  getElection(id: $id) {\n    electionName\n    races {\n      id\n      title\n      candidates {\n        id\n        joined\n        firstName\n        lastName\n        username\n        role\n        avatar {\n          url\n        }\n        vehicle {\n          year\n          make\n          model\n          trim\n          image {\n            id\n            smallUrl\n          }\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GET_USER_VOTE($ballot: ID) {\n  getUserVote(ballot: $ballot) {\n    candidate {\n      id\n    }\n  }\n}"): (typeof documents)["query GET_USER_VOTE($ballot: ID) {\n  getUserVote(ballot: $ballot) {\n    candidate {\n      id\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GET_ACTIVE_ELECTIONS {\n  getActiveElections {\n    id\n    electionName\n    endTime\n  }\n}"): (typeof documents)["query GET_ACTIVE_ELECTIONS {\n  getActiveElections {\n    id\n    electionName\n    endTime\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SUBMIT_ELECTION_MUTATION($election: ElectionInput!) {\n  submitElection(election: $election) {\n    id\n  }\n}"): (typeof documents)["mutation SUBMIT_ELECTION_MUTATION($election: ElectionInput!) {\n  submitElection(election: $election) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation LOG_ACTIVITY_MESSAGE($message: String!, $messageCode: String!, $time: DateTime!, $username: String!, $link: String) {\n  logActivityEvent(\n    message: $message\n    messageCode: $messageCode\n    time: $time\n    username: $username\n    link: $link\n  ) {\n    message\n  }\n}"): (typeof documents)["mutation LOG_ACTIVITY_MESSAGE($message: String!, $messageCode: String!, $time: DateTime!, $username: String!, $link: String) {\n  logActivityEvent(\n    message: $message\n    messageCode: $messageCode\n    time: $time\n    username: $username\n    link: $link\n  ) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation LOG_MEMBERSHIP_MESSAGE($date: DateTime!, $code: String!, $message: String!, $userId: ID!) {\n  logMembershipEvent(message: $message, code: $code, date: $date, userId: $userId) {\n    message\n  }\n}"): (typeof documents)["mutation LOG_MEMBERSHIP_MESSAGE($date: DateTime!, $code: String!, $message: String!, $userId: ID!) {\n  logMembershipEvent(message: $message, code: $code, date: $date, userId: $userId) {\n    message\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query CURRENT_USER_QUERY {\n  myself {\n    id\n    username\n    email\n    firstName\n    role\n    accountStatus\n    accountType\n    avatar {\n      id\n      url\n      smallUrl\n    }\n  }\n}"): (typeof documents)["query CURRENT_USER_QUERY {\n  myself {\n    id\n    username\n    email\n    firstName\n    role\n    accountStatus\n    accountType\n    avatar {\n      id\n      url\n      smallUrl\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;